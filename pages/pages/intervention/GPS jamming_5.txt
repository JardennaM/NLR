url: https://www.researchgate.net/publication/313109966_Defeating_drone_jamming_with_hardware_sandboxing








    






 











































(PDF) Defeating drone jamming with hardware sandboxing


We use cookies to make interactions with our website easy and meaningful, to better understand the use of our services, and to tailor advertising. For further information, including about cookie settings, please read our Cookie Policy . By continuing to use this site, you consent to the use of cookies.Got itWe value your privacyWe use cookies to offer you a better experience, personalize content, tailor advertising, provide social media features, and better understand the use of our services.To learn more or modify/prevent the use of cookies, see our Cookie Policy and Privacy Policy.Accept CookiestopSee all ›1 CitationsSee all ›8 ReferencesSee all ›2 FiguresDownload citationShare  Facebook Twitter LinkedIn RedditDownload full-text PDFDefeating drone jamming with hardware sandboxingConference Paper (PDF Available) · December 2016 with 1,386 ReadsDOI: 10.1109/AsianHOST.2016.7835557  Conference: 2016 IEEE Asian Hardware-Oriented Security and Trust (AsianHOST)Cite this publication Joshua Mead Christophe Bobda21.77University of Florida Taylor JL Whitaker1.11University of ArkansasDiscover the world's research15+ million members118+ million publications700k+ research projectsJoin for free Figures - uploaded by Christophe BobdaAuthor contentAll content in this area was uploaded by Christophe BobdaContent may be subject to copyright. Drone Architecture…  High-Level Drone System Design with Hardware Sandboxing… Download full-text PDFContent uploaded by Christophe BobdaAuthor contentAll content in this area was uploaded by Christophe Bobda on Feb 10, 2018 Content may be subject to copyright. 





Defeating Drone Jamming With HardwareSandboxingJoshua Mead, Christophe Bobda, Taylor JL WhitakerComputer Science and Computer EngineeringUniversity of ArkansasFayetteville, AR 72701{jpmead, cbobda, txw043}@uark.eduAbstract—In this work, we concern ourselves with the securityof drone systems under jamming-based attacks. The focus is ondesign and synthesis structure with the anti-jamming securityneeds of drone systems. We explore a relatively new conceptknown as hardware sandboxing, to provide runtime monitoringof boundary signals and isolation through resource virtualizationfor non-trusted system-on-chip (SoC) components. We utilizeField Programmable Gate Array (FPGA) based development andtarget embedded Linux for our drone hardware/software systemcontaining the hardware sandbox. We design and implementour working concept on the Digilent Zybo FPGA, which usesthe Xilinx Zynq System. Our design is validated via simulation-based tests to mimic jamming attacks and standalone, stationarytests with commercial transmitter and receiver equipment. Inboth cases, we are successful in detecting and isolating unwantedbehavior.I. OV ERVIEW AND MOTIVATIONUnmanned aerial vehicles (UAVs), commonly known asaerial drones, have become prevalent and useful across manydomains such as agriculture [2], recreation [3], and militarywhere drone usage is expected to continue to grow by 50%in the next four years [4]. Drones are remotely controlledusing radio frequency (RF) waves which makes them subjectto potential jamming attacks where attackers disrupt RF signalsin the same frequency band as the target. The likelihood of RFjamming is very high and has occurred during the Iraq Warwith the Warlock RF [5]. Jammers come in various designs,ranging from the simple constant jammer that transmits ajamming signal continuously, the random jammer, which onlytransmits intermittently [6], to more complex ones such as thereactive jammer where a signal is only sent when target trans-mission is sensed [6], [7], [8], and other intelligent jammerswhich know and leverage the protocols and modulation used.Traditional means to limit the effects of jamming haveturned to spread spectrum techniques, most notably frequencyhopping (FHSS) and direct sequence (DSSS). In FHSS, asender will quickly hop along channels across a wide fre-quency band in a speciﬁed order, while in DSSS, a senderwill distribute their message on a narrow band across a widefrequency range through the use of pre-determined spreadingcodes. The original message is multiplied by the spreadingcodes to achieve this level of spread-spectrum. A receiver canuse the same codes to de-spread the received transmission backto its original message. While both of these techniques areuseful, a powerful or intelligent jammer can still effectivelyjam at least parts of the transmission, with FHSS being moresusceptible to simple, narrow-band jamming. With great powerdevoted to jamming, full jamming of these spread spectrumsignals is possible [9]. In order to detect jamming, comparingsignal strength or signal-to-noise-ratio (SNR) is a commonmethod [7], however this has trouble when dealing with energyefﬁcient, low-power jamming such as reactive or intelligentjammers. Other anti-jamming techniques such as in [10] havelooked at comparing received packet loss at the preamble of thereceived transmission to the rest of the message. This howeverdoes not take into account other intelligent jammers, such aspowerful ones where modulation techniques are known andcan know to jam the start of the sent message.Our end-goal is to be able to detect jamming regardless ofjammer in RF drone systems. In jamming, an attacker transmitstheir signal on the same frequency band to interfere with thecorrect signal. The attacker’s goal is to distort the signal tothe extent where either the receiver is unable to correctlyreceive the transmission, resulting in total denial-of-service,or parts of the transmission are incorrect, resulting in loss ofintegrity and possible denial-of-service for certain aspects ofthe system. Thus, the drone has been compromised and canbe brought down by the attacker due to loss of control. In adrone system, the controller transmits the signals to be readby the receiver to generate the correct control bit signals forﬂight control. Because in a valid transmission these bit signalsfollow a predeﬁned protocol, we can monitor these incomingsignals to continuously check that no deviation occurs. Weassume any deviation from this predeﬁned behavior indicatesdenial-of-service, and thus, indicates jamming is present.In order to do this, we can utilize a hardware compo-nent we designed known as the hardware sandbox that wasﬁrst conceived from the need to combat hardware Trojans.Hardware Trojans are malicious alterations or additions inintellectual property (IP) hardware cores which lay dormantuntil activation. While difﬁcult to detect prior to runtime, if weconsider that the Trojan’s payload will have a discernible effecton the output signals of the IP, we can monitor the signalsat runtime at the boundary of the component and check toensure they satisfy the original design description and protocol.This same concept can be applied in drone jamming, in whichcase the trigger is the drone jammer and the payload isthe denial-of-service and deviation of control signal behavior.Because the RF part of the system is exposed to externalattacks, it can be treated as non-trusted and shielded with ahardware sandbox to protect the rest of the system. In thiswork, we present the design of our hardware sandbox alongwith simulation-based testing to simulate jamming attacks and




verify the results of our implementation. We have, though,performed basic tests on stationary hardware utilizing solelythe transmitter and receiver to verify performance under real-world timing constraints and ensure accurate communicationbetween software and hardware. The drone control system isimplemented as system on FPGA with the hardware sandboxused to shield the Spektrum DX7SE transmitter and AR7010receiver. Our design is validated via simulation-based tests tomimic jamming attacks and standalone, stationary tests withcommercial transmitter and receiver equipment. In both cases,we are successful in detecting and isolating unwanted behavior.The rest of the paper is organized as follows: Section IIprovides some basic on hardware sandboxing followed by theintegration of sandbox in the drone control architecture insection III. The drone operation is ﬁrst presented, followedby the various design choices and the selection of sandboxcomponents. Our method is validated in section IV-B withsimulation of jamming on a system on FGPA implementationof a drone control system. Section V concludes the work andand discuss possible extensions.II. HA RDWAR E SANDBOXING BASICSOverview: The hardware sandbox was born on theconcept of isolation in software sandboxing and targets poten-tially malicious activity in hardware IPs and components [13].Hardware sandboxing is realized through a combination ofchecker components and virtual resources along with controllerand conﬁguration registers.Properties checkers consist of either one or more checkersused for runtime monitoring and enforcement of security rulesdeﬁned by the system integrator at compile time. A checker iscreated based off the incoming or outgoing signal propertiesof an IP component in the sandbox and can be limited to onlya subset of IP signals and properties for overhead reduction.Our implementation of the properties checkers is currentlybased around the Open Veriﬁcation Library by Accellera [11].While this library gives us the ability to create our ownexpressions to deﬁne the necessary properties of the signals toactively enforce and monitor, a more formal method of deﬁningsignal properties exists in veriﬁcation languages, such as theProperty Speciﬁcation Language [12]. The Open VeriﬁcationLibrary (OVL) consists of a series of parameterizable assertioncheckers which take in some form of an input signal andmonitors and enforces the property needing to be checked.We use the OVL Cycle Sequence, which can be synthesizedin hardware. The cycle sequence takes in primarily an inputvector signal, known as test expression, and outputs a signalknown as ﬁre. Essentially, when a check is active the CycleSequence samples the MSB of the test expression sequenceon the rising clock edge. As long as this bit value is high,the check passes, and the sequence is left-shifted by one bit.This process repeats for as many clock cycles as speciﬁedby the system integrator. If at any point in time during thecheck the sampled bit is low, the check ends and ﬁre isasserted, indicating a problem has occurred. If pipelining isspeciﬁed by the system integrator, multiple checks can takeplace at the same time; otherwise, the previous check mustﬁnish before beginning a new one. For example, consider thesystem consisting of the signals req,busy, and done. If inthis system our signals are observed such that when req isasserted, busy is asserted on the following clock cycle, andafter busy is ﬁnished, done is asserted, we can utilize theOVL Cycle Sequence in VHDL and build test expressionthrough concatenation in the following way: req & (busy andnot done)&(done and not busy).The concept of a sandbox requires that resources neededby IPs are provided in virtual form within the sandbox wherethey can be used by an IP without negatively affecting therest of the system. Typically, the virtual resources consideredfor inclusion are those that are shared between the trustedsystem and the potentially malicious component because wewant to limit the effects of a compromised IP. The mainadvantage here is that the interface between virtual resourceswithin the sandbox and physical resources follows a secureprotocol and can never cause a denial-of-service. A set of statusand conﬁguration registers are used besides virtual resourcein the sandbox for the communication between the sandboxmanager and the rest of the system. Statistics on the behaviorof IPs in the sandbox can be recorded for further analysis.Finally, a sandbox manager is needed to control data exchangeand handling inside the sandbox. This includes the exchangebetween virtual resources and their physical counterparts, aswell as the handling of the results from the checkers and thepotential conﬁguration of the sandbox.III. SYS TE M DESIGN AND IM PL EM EN TATION FORJAMMING PREVENTIONFig. 1: Drone ArchitectureCombiningthe previousinformation aboutour relevantmaterials andplatforms, oursimpliﬁed, high-level system designfor the unsecureddrone is given inFigure 1.A. Drone Opera-tionThe main com-ponents in this ar-chitecture are the Receiver Control IP and the Motors ControlIP. These two hardware IPs simply provide an interface for thedrone software (we use the widespread ArduCopter) to readand write to and from the receive signals and the directly-connected drone motors. For control of the copter, the usertransmits the controller’s input from the Spektrum DX7SE tothe AR7010 receiver on the drone. After decoding the RFtransmission into the seven control channels, these signalsare fed to the Receiver Control IP for register storage. Thesecontrol register values are fetched regularly by the CPU in theArduCopter software running on Linux and must be processedto determine the state of the six motors of the hexacopterdrone. These motor values are then written from softwareto the hardware registers of the Motor Control IP and sentout via PMOD connectors to the physical motors of thedrone. Because the command transmission is exposed, thisdesign is non-secure and susceptible to jamming attacks on



the transmission and reception process to negatively impact ortake down the ﬂight. Note that if an attacker wishes to disruptthis ﬂight control ﬂow, the only means to do so would bethrough an RF receiver like the Spektrum AR7010 used. Whilepreventing the attacker from jamming our real transmissionsignal is impossible, if we can protect the system from apotentially compromised receiver, we can secure the ﬂight ofthe drone. This follows the nature of hardware sandboxing.B. Hardware Sandbox IntegrationFig. 2: High-Level Drone System De-sign with Hardware SandboxingBecause wetreat the receiveras a non-trustedcomponent withthe possibilityof beingcompromisedby a jammer, wecan utilize thehardware sandboxin a similar fashionas seen in sectionII with respect toisolating hardwareTrojans. We placethe hardwaresandbox on the boundary of the external RF receiver tomonitor its signals, as seen in our new, secure system designin Figure 2. The signals from the receiver are monitored forthe possibility of malicious behavior and, through a virtualreceiver, only valid, protocol-following signals are output tothe rest of the system for ﬂight control. In this way, we canknow when a jamming attack is taking place and that the restof the system will be as least negatively affected as possible.A more detailed, high-level diagram is given in Figure 2 andmore detail regarding the principal components is given inthe subsections below.1) Signal Checker: Because the protocol of the correct,paired receiver is known, as described in section III-A, wecan build a checker using the OVL Cycle Sequence to samplethe seven PWM-based signals for valid behavior at a constantrate, multiple times during a single PWM period. To do this,we must divide the system clock (100 MHz) such that thefrequency matches the original frequency of the PWM signals,around 45.45 Hz, multiplied by the sample rate. For this work,we use a 200x sample rate for a good balance between checkerresolution and design area. A 100x, 500x, 1000x, and 2000xsample rate were also considered and their results are shownin section IV-B. With the right clock frequency and numberof times to sample in a period, we now turn our attentionto generating the proper checking sequence for the OVLCycle Sequence’s test expression. This sequence is basedon the seven channels from the receiver: throttle (throttle),ailerons (aile), elevators (elev), rudder (rudd), gear (gear),auxiliary 1(aux1), auxiliary 2(aux2).Unlike the static RS232-UART examples that follow thesame sequence every transmission, every clock cycle, thereceiver has the dynamic property described in section III-Awhere the start of the pulse of the current control signal isdependent upon the previous pulse length, not a speciﬁc timevalue. Therefore, a sequence generation algorithm had to bedevised. This is given below in Algorithm 1.Algorithm 1 Sequence Generation AlgorithmInput: Aile, Aux1, Gear, Elev, Aux2, Throttle, RuddOutput: Sequence BitInitialization :1: Signals[] = {Aile, Aux1, Gear, Elev, Aux2, Throttle, Rudd}2: Period Count = 0, Pulse Count = 0, Pulse Index = 03: Sequence Bit = ’1’ to startProcess LOOP :4: Period Count = Period Count + 15: if (Period Count = Sampling Rate)then6: Finish7: else if (Pulse Count = 5%-9% of Sampling Rate)then8: Sequence Bit = ’1’ iff Signals[Pulse Index] goes low by the end of this period9: Reset Pulse Count and Increment Pulse Index by 1 when Signals[Pulse Index]goes low10: else11: if (Pulse Index != 7) then12: Pulse Count = Pulse Count + 113: Sequence Bit = ’1’ iff Signals[Pulse Index] is the only signal that is high14: else15: Sequence Bit = ’1’ iff all Signals are low16: end if17: end ifUtilizing this sequence generation algorithm and our sam-ple rate of 200x, our sequence vector for test expressionwould be 200 bits long, thus taking the full 200 clock cyclesfor the receiver PWM period to complete. Before startingthe algorithm, however, we must ﬁrst synchronize with thereceiver, waiting for the ﬁrst rising edge of aile, as this signalis the ﬁrst in the cascaded sequence described in III-A. Oncesynchronized, we start by ﬁrst initializing the sequence bitwith an always ’1’ to indicate that, because we should alwaysbe receiving a signal from the transmitter in a non-jammedenvironment, a check should always be running. From there,we start checking the ﬁrst pulse, aile, to ensure that onlyit is high for the ﬁrst 5%. After, because the user’s controldictates the length of the PWM, the next 4% of the periodis independent, and we can only check to ensure that boththe signal goes low during this time and the other signalsremain low. Once the active signal goes low, we move ontothe next signal’s pulse and repeat this process. Finally, afterensuring all seven signals followed their correct pulse pattern,the remainder of the sample period is devoted to ensure allsignals stay low. While this sequence bit generation representsthe correct check to be used in our sandbox, in practice itneeds to be made more complex. Due to potential for jitterand inconsistent clock periods, this algorithm will not hold asit assumes a rigid PWM structure and period. In fact, jitteris present on the AR7010 receiver’s clock, typically deviatingby a margin of up to 0.3 Hz from the 45.45 Hz baseline.Therefore, we need to allow for this margin by adding a shortwindow to the time before and after the assumed end pointsof each signal pulse and total period. For the signal pulses,this window is added onto the 4% PWM length that is user-dependent. As long as each signal pulse goes low during thisperiod, we assume the signals are still behaving correctly. Oncethe pulse does go low, we look to check the next signal pulsefor correct behavior. The same concept is applied for the fullPWM period ending and starting anew with the rise of thesignal, aile. While this does not provide us with quite asﬁne-grain resolution, major deviance from the base protocolwill still be detected, especially if the window size is small.For this work, we use a window size of two clock cycles.



At a 200x frequency rate, this gives an approximate 0.45 Hzjitter tolerance to the base 45.45 Hz signal, which covers theobserved 0.3 Hz maximum jitter. With respect to the lengthof the window tolerance, we add the number of clock cyclesonto the length of our sequence vector, test expression inour case, this is two cycles, and thus, two extra bits. Becausethe signal is allowed to ﬁnish its full period during the window,we add one more extra bit at the end to indicate whether or notthe period actually ﬁnished during the window and a new onestarted or not. Therefore, in total, our test expression input is203 bits long, and the Cycle Sequence takes 203 clock cyclesto ﬁnish. This is too long for a normal PWM signal periodat our sample rate, and thus, we use the pipelined setting ofthe OVL Cycle Sequence to allow multiple checks to happenat the same time. Whenever a new aile pulse begins duringthe end window, we start the next check while still allowingthe current check to ﬁnish the remaining clock cycles. This isnot a problem as the generated sequence bits at the end duringthe window are independent from the rest of the sequencegeneration at the beginning, and therefore, there will never beoverlapping, conﬂicting values between checks.2) Virtual Receiver/Manager: Next, we turn to includingvirtual resources in our drone receiver hardware sandbox toensure our system cannot be compromised. For our drone, thisresource must be the receiver as both the attacker and the usershare this hardware. However, because all communication withthe receiver happens via airwaves off the board, we cannotutilize our virtual resource in the same manner as other virtualresources: isolating the attack to prevent the physical resourcefrom being compromised and affecting the rest of the system.Instead, we can do just the opposite: allow the best, correctcommunication possible in spite of a compromised physicalresource. Thus, we can include a virtual receiver to generatethe PWM signals following the correct protocol as describedin III-A. So long as the ﬁre from our OVL cycle sequence-based checker is low representing correct behavior, we cansimply pass the received signals to the rest of the system;otherwise, each channel defaults to a base PWM value fromthe point of error to the end of a full period. We use thebasic 5% PWM value as our default. From there, we wait untilwe experience a full valid period without ﬁre being asserted,indicating the jamming problem is gone. If this happens, weswitch back to the received signals for the next period until ﬁreis reasserted. Extra care is needed to make the transition fromreceived signals to our correctly-generated signals seamless.Therefore, we monitor the position of our sample during afull period and determine which signal is currently active andfor how many clock cycles. Based on this knowledge, if ﬁre isasserted, we know exactly how to proceed for the remainingperiod. For example, if ﬁre is asserted due to a signal pulse notlasting long enough, we can seamlessly take over and generatethe correct pulse length without the rest of the system seeingthe problem. The reverse is also true if the pulse remains highfor too long. The virtual receiver can begin the next signal’spulse, outputting the correct protocol-behaving signals to therest of the system. Due to this necessary ability, we must bufferthe incoming received signals to align with the results fromthe OVL Cycle Sequence and our virtual receiver logic. Ourvirtual receiver’s manager assumes the same ﬂexible designthat the sequence generation uses with regards to window size.Because our virtual receiver’s output is based solely on theCycle Sequence’s ﬁre signal during a period, it is imperativethat the incoming signals, the current check, and the virtualreceiver’s position are all in sync. For example, if the period ofthe signals were to deviate too far and invoke ﬁre, our virtualreceiver generation would start. However, because of clockjitter, if the jamming were to be stopped, it is possible for thesignals to make up the margin lost or gained by the frequencychange when jammed and re-match our sequence generationlogic. Doing so, would cause ﬁre to stop being asserted. If thevirtual receiver was rigid, the changeover from virtual to realsignals would be incorrect.3) Status Register: Lastly, we connect ﬁre to a statusregister to be read via software to indicate if a problem hasoccurred. We interface with this register through the AXI busand protocol. Since ﬁre is only at most asserted for one clockcycle during a single check period, in order to guarantee thatwe can read the register to know a problem has occurred, weconnect this signal to a D Flip-Flop with Enable, setting theenable to be a signal indicating whether the value has been reador not. When ﬁre is asserted, this read signal goes low, meaningthis value has not been read. When a valid read has occurred inthe AXI protocol, the read signal is asserted, and new values,such as ﬁre being low, will now be stored. Because embeddedLinux was used, a character device driver was written to beable to read this register in the software running on Linux forpotential logging.IV. TES TS A ND RE SU LTSA. OverviewWith our full design in place, we look to verifying ourmethod through our tests, observations, and results. We use theVivado Design Suite and Flow provided by Xilinx for synthesisand implementation for the Zybo FPGA. We synthesize andimplement using the Vivado Synthesis and ImplementationDefaults. We give our implementation results in Section B,provide assumptions related to the jamming impact on signalsin Section C, and ﬁnally, describe two short, real-world exper-iments to validate the signal checker’s ability to detect invalidbehavior and the hardware sandbox’s ability to perform in aLinux environment in Section D.B. Implementation ResultsAfter implementation, we compare various performancemetrics to show the resource overhead when utilizing the hard-ware sandbox. The signal checker uses most of the sandboxresource with 438 slice LUTs (2.49%) and 379 Slice registers(1.08%) compared to the virtual receiver/manager with 88slice LUTs (0.5%) and 55 slice registers (0.16%) and thestatus register 134 slice LUTs (0.76%) and 171 slice registers(0.49%). This makes sense as this component takes both thesequence generation logic and the OVL Cycle Sequence. Asdescribed in III, the length needed for our checker at 200xsample rate is 203 bits. The OVL Cycle Sequence pipes these203 bits one register at a time for its logical tests, and therefore,as the sample rate increases, so does the area. Table I gives afew results of considered sample rates versus resource usage.This table only displays the resource usage of the checker.Because the sample rate increases, and thus the clock fre-quency in the sandbox, the window size must also increase



SampleRateWindowSizeBitLengthSlice LUTs (Util%) Slice Registers(Util%)100x 1 102 bits 290 (1.65%) 273 (0.78%)200x 2 203 bits 438 (2.49%) 379 (1.08%)500x 5 506 bits 867 (4.93%) 688 (1.95%)1000x 10 1011 bits 1597 (9.07%) 1198 (3.40%)2000x 20 2021 bits 3033 (17.23%) 2213 (6.29%)TABLE I: Utilization Results of Various Signal Checkers.to allow for the same total window time. Bit length givesthe total number of bits required for our sequence-basedtest expression for the OVL Cycle Sequence. As the sam-ple rate increases, the resource utilization increases roughlylinearly. For additional security, an integrator may opt for ahigher sample rate. However, 200x offers ample coverage ofour PWM signal while using fewer resources, and therefore,in this work, we utilize this rate.Slice LUTs (Util%) Slice Registers (Util%)Drone System without sandbox 851 (4.84%) 938 (2.66%)Sandbox-Secured Drone System 1511 (8.59%) 1543 (4.38%)TABLE II: Utilization Results for the Drone Design with andwithout Hardware Sandboxing.A side by side comparison between our design with andwithout hardware sandbox (Table II) shows that only 660 morelookup tables and 605 more registers for the hardware sandbox,representing an additional 3.75% and 1.72% of the FPGA totalavailable resources, respectively. While the resource utilizationin this context compared to the base drone system appearscostly, with a 77.6% increase in LUTs and 64.5% increase inregister slices, we argue this is reasonable. First, the originaldesign was not large to start so any resource increase throughadditional logic will make the design of magnitudes higherquickly. Second, while the drone system can increase in sizethough additional functionality and feature set, the hardwaresandbox will remain a ﬁxed size. This is due to the hardwaresandbox being tailored for a speciﬁc protocol, which remainsunchanged. Therefore, in larger designs the hardware sandboxwill not appear as obtrusive.Worst Negative Slack (ns) Power (W)Drone System without sandbox 3.201 ns 1.657 WSandbox-Secured Drone System 2.663 ns 1.658 WTABLE III: Performance Metrics for the Drone Design withand without Hardware Sandboxing.Similar to the the side by side resource overhead compar-ison, Table III provides a side by side comparison of timingand power consumption for the two version of the design. Theworst negative slack displays the lowest setup slack in thesystem from a 10 ns period (considering the 100 MHz systemclock frequency) with the larger value meaning a greatercushion to meet timing. First, while our drone design withhardware sandboxing meets the same timing requirements asthat of the base design, it has a longer critical path by 0.538ns in the path to the memory mapped registers found in theIPs and status register. This increase is not from the logic ofthe signal checker or the virtual receiver, but rather found in apath in the AXI memory mapped registers logic, and largelydue to a longer routing delay from the larger design. Thesecond aspect in Table III is the power consumption. This wasperformed at the default settings in Vivado’s power estimatorat 25 degrees Celsius ambient temperature. As evident, thepower consumption is largely the same, with both havingthe FPGA processing system consume roughly 92% of thereported power. Even though there is added logic with thehardware sandbox, because it operates at many magnitudesslower frequency than the rest of the system (on the order ofkHz versus MHz), the power consumption impact is negligible.C. Jamming Assumptions and SimulationsBecause building and testing a full jammer for our trans-mitter/receiver combination is out of the scope of this work, wemake a couple of assumptions and hypotheses regarding theimpact of jamming on the seven cascaded control signals out-put from the receiver before testing our design. First, becausejamming aims to disrupt and even fully block communicationto the receiver, a behavior of the signals under full jammingwould be the equivalent of turning off the transmitter to preventthe receiver from receiving any form of valid transmission. Inour case, as mentioned in section III-A, when the controller isturned off and disconnected from the receiver, the frequencyof the PWM signals decreases. Therefore, full jamming hasthe ability to alter the frequency of the signals output from thecontroller and must be prevented. Second, because it is possibleto only jam parts of a transmission such that while the receiverstill receives communication, parts of it could be incorrect, asdemonstrated in jamming bits in WLAN communication [20],a possibility of signal behavior under partial jamming wouldbe wrong PWM pulse lengths stemming from the disruptedtransmission. We do not believe this to be a strong assumptiondue to the controller’s ability to initially program the sensitivityrange of control aspects, which in turn would affect the PWMpulse of the signals. While we keep the pulses between 5%and 9%, we assume a jammed transmission has the potentialto alter these lengths. However, unlike the ﬁrst assumptionregarding full jamming, which has solid support from manualobservation, we note that this assumption would require futuretesting and research to accurately verify. For the sake of thispaper, however, we include it. Based on our assumptions,we simulate various test cases in Xilinx ISim to show thehardware sandbox is capable of detecting and preventing themalicious behavior from affecting the rest of the system. Thus,in all simulation tests, we were successful in detecting thejamming behavior from our assumptions and in the generationof correctly-followed PWM protocol signals to the rest ofthe system. We demonstrated the seamless takeover from thevirtual receiver and back to the real signals when jamming isno longer present.D. Real-World TestingOutside of simulating, we performed two real-world testsutilizing the Spektrum DX7SE transmitter and AR7010 re-ceiver with the hardware sandbox elements implemented onthe Zybo FPGA. In both tests, our objective was to be able tosend all valid inputs on the controller and observe the hardwaresandbox performing correctly. Our ﬁrst test, however, focusedsolely on the signal checker’s accuracy, while the second


Load moreCitations (1)References (8)... It applied a reduced-rank MMSE based C/A code correlator for single antenna GPS receivers that replaces a standard C/A code correlator for enhanced anti-jam/antispoofing capability. J. Mead et al. explored a hardware named sandboxing in [14], to provide runtime monitoring of boundary signals and isolation which can detect and isolate unwanted behavior. A. Ranganathan et al. proposed a detection technique called the auxiliary peak in a novel GPS receiver referred to SPREE tracking enables detection of a strong attacker capable of executing the seamless GPS-spoofing attack in [20].  ...An Efficient UAV Hijacking Detection Method Using Onboard Inertial Measurement UnitArticleDec 2018ACM T EMBED COMPUT S Zhiwei Feng Nan GuanMingsong Lv Wang yiWith the fast growth of civil drones, their security problems meet significant challenges. A commercial drone may be hijacked by a GPS-spoofing attack for illegal activities, such as terrorist attacks. The target of this article is to develop a technique that only uses onboard gyroscopes to determine whether a drone has been hijacked.
Ideally, GPS data and the angular velocities measured by gyroscopes can be used to estimate the acceleration of a drone, which can be further compared with the measurement of the accelerometer to detect whether a drone has been hijacked. However, the detection results may not always be accurate due to some calculation and measurement errors, especially when no hijacking occurs in curve trajectory situations. To overcome this, in this article, we propose a novel and simple method to detect hijacking only based on gyroscopes’ measurements and GPS data, without using any accelerometer in the detection procedure. The computational complexity of our method is very low, which is suitable to be implemented in the drones with micro-controllers. On the other hand, the proposed method does not rely on any accelerometer to detect attacks, which means it receives less information in the detection procedure and may reduce the results accuracy in some special situations. While the previous method can compensate for this flaw, the high detection results also can be guaranteed by using the above two methods. Experiments with a quad-rotor drone are conducted to show the effectiveness of the proposed method and the combination method.ViewShow abstractShow moreStopping hardware trojans in their tracksC AndersonC. Anderson. (2015, Jan.) Stopping hardware trojans in their tracks. a 
few adjustments could protect chips against malicious circuitry.Open verification library (ovl) working groupO W GroupO. W. Group. (2015, Jan.) Open verification library (ovl) working group. 
[Online]. Available: http://accellera.org/activities/working-groups/ovlJamming and anti-jamming techniques in wireless networks: A surveyArticleJan 2014INT J AD HOC UBIQ COKanika Grover Alvin Lim Qing YangBecause of the proliferation of wireless technologies, jamming in wireless networks has become a major research problem due to the ease in blocking communication in wireless networks. Jamming attacks are a subset of denial of service (DoS) attacks in which malicious nodes block legitimate communication by causing intentional interference in networks. To better understand jamming and anti-jamming, we surveyed and analysed their various techniques. For evaluating jamming, we categorised the types of jammers implemented in the literature and investigated the placement strategies for supporting effective jamming. For anti-jamming approaches, we start by discussing the protocols for localising jammers before presenting the mechanisms for detection and jamming countermeasure. We present comparison tables for each of the jammer types, jammer placements, jammer localisation, jamming detection schemes and jamming countermeasures. Our analyses are helpful for selecting an existing strategy for a particular system setup. Finally, we discuss open issues in this field.ViewShow abstractWireless Communications under Broadband Reactive Jamming AttacksArticleFeb 2015IEEE T DEPEND SECURESong Fang Yao LiuPeng NingA reactive jammer jams wireless channels only when target devices are transmitting; Compared to constant jamming, reactive jamming is harder to track and compensate against [2], [38]. Frequency hopping spread spectrum (FHSS) and direct sequence spread spectrum (DSSS) have been widely used as countermeasures against jamming attacks. However, both will fail if the jammer jams all frequency channels or has high transmit power. In this paper, we propose an anti-jamming communication system that allows communication in the presence of a broadband and high power reactive jammer. The proposed system transmits messages by harnessing the reaction time of a reactive jammer. It does not assume a reactive jammer with limited spectrum coverage and transmit power, and thus can be used in scenarios where traditional approaches fail. We develop a prototype of the proposed system using GNURadio. Our experimental evaluation shows that when a powerful reactive jammer is present, the prototype still keeps communication, whereas other schemes such as 802.11 DSSS fail completely.ViewShow abstractDetection of Reactive Jamming in DSSS-based Wireless CommunicationsArticleFeb 2014IEEE T WIREL COMMUN Michael Spuhler Domenico Giustiniano Vincent Lenders Jens B. SchmittReactive jammers have been shown to be a serious threat for wireless communication. Despite this, it is difficult to detect their presence reliably. We propose a novel method to detect such sophisticated jammers in direct sequence spread spectrum (DSSS) wireless communication systems. The key idea is to extract statistics from the jamming-free symbols of the DSSS synchronizer to discern jammed packets from those lost due to bad channel conditions. Our contribution is twofold. First, we experimentally evaluate new empirical models utilizing the preamble symbols of IEEE 802.15.4 packets, thus enabling the accurate prediction of the packet delivery ratio (PDR). We show that the chip error rate-based metric is superior to metrics used in the literature, offering an accurate and reactive indicator of the true PDR. Our second contribution is the design and evaluation of a detection technique relying on this metric to detect reactive jammers. We build a software-defined radio testbed and show that our technique enables the error-free detection of reactive jammers that jam all packets on links with a PDR above 0.3. To the best of our knowledge, our detector is the first to detect reactive jamming attacks targeting the physical layer header of DSSS packets, and does not require any modifications of the wireless communication system.ViewShow abstractCyber security threat analysis and modeling of an unmanned aerial vehicle systemConference PaperFull-text availableNov 2012 Ahmad Yazdan Javaid Weiqing Sun Mansoor AlamVijay DevabhaktuniAdvances in technology for miniature electronic military equipment and systems have led to the emergence of unmanned aerial vehicles (UAVs) as the new weapons of war and tools used in various other areas. UAVs can easily be controlled from a remote location. They are being used for critical operations, including offensive, reconnaissance, surveillance and other civilian missions. The need to secure these channels in a UAV system is one of the most important aspects of the security of this system because all information critical to the mission is sent through wireless communication channels. It is well understood that loss of control over these systems to adversaries due to lack of security is a potential threat to national security. In this paper various security threats to a UAV system is analyzed and a cyber-security threat model showing possible attack paths has been proposed. This model will help designers and users of the UAV systems to understand the threat profile of the system so as to allow them to address various system vulnerabilities, identify high priority threats, and select mitigation techniques for these threats.ViewShow abstractOn the Performance of IEEE 802.11 under JammingConference PaperFull-text availableMay 2008Emrah Bayraktaroglu Christopher King Xin Liu Bishal ThapaIn this paper, we study the performance of the IEEE 802.11 MAC protocol under a range of jammers that covers both channel-oblivious and channel-aware jamming. We study two channel-oblivious jammers: a periodic jammer that jams deterministically at a specified rate, and a memoryless jammer whose signals arrive according to a Poisson process. We also develop new models for channel-aware jamming, including a reactive jammer that only jams non-colliding transmissions and an omniscient jammer that optimally adjusts its strategy according to current states of the participating nodes. Our study comprises of a theoretical analysis of the saturation throughput of 802.11 under jamming, an extensive simulation study, and a testbed to conduct real world experimentation of jamming IEEE 802.11 using GNU Radio and USRP platform. In our theoretical analysis, we use a discrete-time Markov chain analysis to derive formulae for the saturation throughput of IEEE 802.11 under memoryless, reactive and omniscient jamming. One of our key results is a characterization of optimal omniscient jamming that establishes a lower bound on the saturation throughput of 802.11 under arbitrary jammer attacks. We validate the theoretical analysis by means of Qualnet simulations. Finally, we measure the real-world performance of periodic and memoryless jammers using our GNU radio jammer prototype.ViewShow abstractJamming sensor networks: Attack and defense strategiesArticleFull-text availableJun 2006IEEE NETWORK Wenyuan XuKe Ma W. Trappe Yanyong ZhangWireless sensor networks are built upon a shared medium that makes it easy for adversaries to conduct radio interference, or jamming, attacks that effectively cause a denial of service of either transmission or reception functionalities. These attacks can easily be accomplished by an adversary by either bypassing MAC-layer protocols or emitting a radio signal targeted at jamming a particular channel. In this article we survey different jamming attacks that may be employed against a sensor network. In order to cope with the problem of jamming, we discuss a two-phase strategy involving the diagnosis of the attack, followed by a suitable defense strategy. We highlight the challenges associated with detecting jamming. To cope with jamming, we propose two different but complementary approaches. One approach is to simply retreat from the interferer which may be accomplished by either spectral evasion (channel surfing) or spatial evasion (spatial retreats). The second approach aims to compete more actively with the interferer by adjusting resources, such as power levels and communication coding, to achieve communication in the presence of the jammer.ViewShow abstractJoin ResearchGate to find the people and research you need to help your work.15+ million members118+ million publications700k+ research projectsJoin for freeRecommendationsProjectAll my projects are reported on my lab webpage Christophe BobdaSince we had some changes, 
continue to monitor for the updates
www.smartes.uark.edu  View projectProjectReconfigurable computing Private Profile Serge Weber Yves Berviller[...]Ahmed Bouridane-HPRC
-Dynamic partial reconfiguration  View projectProjectTopological Large-Scale Off-road Navigation and Exploration Tim Braun Karsten BernsHenning Bitsch[...]Harding Djakou ChatiView projectArticleFull-text availableCoastal Survey of archaeological sites using dronesJanuary 2015 Dimitrios SkarlatosView full-textArticleDevelopment of Testbed for Aerodynamic Performance of a DroneApril 2018Jungwoo KimJinwook JeongSeonyoung Na[...]Yongbum ChunRead moreConference PaperThe Underwater Intervention Drone, A New Method for Delivering IRM Services in the Subsea Environmen...January 2018Jim JamiesonLee WilsonWayne Sherry[...]Pål Atle SolheimsnesRead moreArticleDrone crews and moral engagementJune 2017 · The PsychologistP. LeeRead moreConference PaperAliDrone: Enabling Trustworthy Proof-of-Alibi for Commercial Drone ComplianceJuly 2018Tianyuan LiuAvesta HojjatiAdam Bates Klara NahrstedtRead moreDiscover moreDownload citationWhat type of file do you want? RIS BibTeX Plain TextWhat do you want to download? Citation only Citation and abstractDownloadDiscover the world's researchJoin ResearchGate to find the people and research you need to help your work.Join for freeorDiscover by subject areaRecruit researchersJoin for freeLoginEmail Tip: Most researchers use their institutional email address as their ResearchGate loginPasswordForgot password? Keep me logged inLog inorContinue with LinkedInContinue with GoogleWelcome back! Please log in.Email · HintTip: Most researchers use their institutional email address as their ResearchGate loginPasswordForgot password? Keep me logged inLog inorContinue with LinkedInContinue with GoogleNo account? Sign upAboutNewsCompanyCareersSupportHelp centerFAQBusiness solutionsRecruitingAdvertising© ResearchGate 2019. All rights reserved.ImprintTermsPrivacy